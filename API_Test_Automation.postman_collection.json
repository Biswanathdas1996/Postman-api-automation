{
	"info": {
		"_postman_id": "6265b617-3c9e-4730-8eac-ddef1fb7b7fd",
		"name": "API Test Automation",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12086075"
	},
	"item": [
		{
			"name": "Test all Posts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status test\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"const getFirestUserId = response.find( user => user.id === 1);\r",
							"\r",
							"pm.collectionVariables.set(\"post-id\",getFirestUserId.id);\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Check if user id is 1\", function () {\r",
							"    pm.expect(getFirestUserId).to.have.property(\"id\")\r",
							"    pm.expect(getFirestUserId.id).to.equals(1);\r",
							"});\r",
							"\r",
							"pm.test(\"Check if body is present\", function () {\r",
							"    pm.expect(getFirestUserId).to.have.property(\"body\")\r",
							"});\r",
							"\r",
							"pm.test(\"Check title value\", function () {\r",
							"    pm.expect(getFirestUserId).to.have.property(\"title\")\r",
							"    pm.expect(getFirestUserId.title).to.equals(\"sunt aut facere repellat provident occaecati excepturi optio reprehenderit\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/posts",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Single post",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"party-id\",pm.collectionVariables.get(\"post-id\"))"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status test\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"Check title value\", function () {\r",
							"    pm.expect(response).to.have.property(\"title\")\r",
							"    pm.expect(response.title).to.equals(\"sunt aut facere repellat provident occaecati excepturi optio reprehenderit\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/posts/{{post-id}}",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"posts",
						"{{post-id}}"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "BASE_URL",
			"value": "https://jsonplaceholder.typicode.com"
		},
		{
			"key": "BASE_URL",
			"value": ""
		},
		{
			"key": "party-id",
			"value": ""
		},
		{
			"key": "post-id",
			"value": ""
		}
	]
}